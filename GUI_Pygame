# Import a library of functions called 'pygame'
import pygame
from pygame.locals import *
import cv2

# Initialize the game engine
pygame.init()

# Set the height and width of the screen
size = [630, 380]
screen = pygame.display.set_mode(size)

pygame.display.set_caption("자동채색")

# Loop until the user clicks the close button.
done = False
clock = pygame.time.Clock()

bgr = cv2.imread('rgb.png')
color = [255,255,255]

while not done:
    clock.tick(10)

    # Main Event Loop
    for event in pygame.event.get():  # User did something
        if event.type == pygame.QUIT:  # If user clicked close
            done = True  # Flag that we are done so we exit this loop

        LEFT = 1  # 왼쪽 버튼에 대한 버튼 인덱스

        if event.type == MOUSEBUTTONUP and event.button == LEFT:
            mouse_xy = pygame.mouse.get_pos()
            x = (mouse_xy[0]) - 350
            y = (mouse_xy[1]) - 20
            b,g,r = bgr[y,x][0], bgr[y,x][1], bgr[y,x][2]
            color = [r,g,b]

        elif event.type == MOUSEMOTION:
            mouse_xy = pygame.mouse.get_pos()
            x = (mouse_xy[0])
            y = (mouse_xy[1])

    # Clear the screen and set the screen background
    screen.fill((200, 200, 200))
    screen.blit(pygame.image.load('multi_img_data/imgs_others_test_sketch/test_apple_02.png'), (20, 20))
    screen.blit(pygame.image.load('rgb.png'), (350, 20))

    pygame.draw.rect(screen, color, [20, 330, 300, 20], 0)

    pygame.display.flip()

# Be IDLE friendly
pygame.quit()


#############################################
# 3/27 결과

# Import a library of functions called 'pygame'
import pygame
from pygame.locals import *
import cv2
import numpy as np
import copy

from Segmentation import Segmentation

# Initialize the game engine
pygame.init()

# Set the height and width of the screen
size = [630, 380]
screen = pygame.display.set_mode(size)

pygame.display.set_caption("자동채색")

# Loop until the user clicks the close button.
done = False
clock = pygame.time.Clock()

bgr = cv2.imread('rgb.png')
origin_img = cv2.imread('multi_img_data/imgs_others_test_sketch/test_apple_02.png')
cv2.imwrite('temp_img.png',origin_img)
color = [255,255,255]
bgr_color = None
sg = Segmentation()

while not done:
    clock.tick(10)
    cur_img = cv2.imread('temp_img.png')
    # Main Event Loop
    for event in pygame.event.get():  # User did something
        if event.type == pygame.QUIT:  # If user clicked close
            done = True  # Flag that we are done so we exit this loop

        LEFT = 1  # 왼쪽 버튼에 대한 버튼 인덱스

        if event.type == MOUSEBUTTONUP and event.button == LEFT:
            mouse_xy = pygame.mouse.get_pos()
            x = (mouse_xy[0])
            y = (mouse_xy[1])
            if x >= 350 and y >= 20 and x <= 692 and y <= 284:
                x -= 350
                y -= 20
                b,g,r = bgr[y,x][0], bgr[y,x][1], bgr[y,x][2]
                if r == 255 and g == 255 and b == 255:
                    break
                color = [r,g,b]
                bgr_color = [b,g,r]

            elif x >= 20 and y >= 20 and x <= 320 and y <= 320 and bgr_color is not None:
                # origin_img[x][y] = np.array(color)
                color_img = sg.start('temp_img.png', bgr_color, [y-20, x-20])
                cv2.imwrite('temp_img.png',color_img)

    # Clear the screen and set the screen background
    screen.fill((200, 200, 200))
    screen.blit(pygame.image.load('temp_img.png'), (20, 20))
    screen.blit(pygame.image.load('rgb.png'), (350, 20))

    pygame.draw.rect(screen, color, [20, 330, 300, 20], 0)

    pygame.display.flip()

# Be IDLE friendly
pygame.quit()
